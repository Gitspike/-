else if ("variable" == semantics::exp_type)
				{
					table temp_var = semantics::stack_st.locate_table(semantics::exp_value);
					if ("err" == temp_var.type)
					{
						cout << "Line: " << ctx->variable()->getStart()->getLine() << "  No declaration of " << var_name << endl;
						return;
					}
					if (NULL == temp_var.all)
					{
						cout << "Line: " << ctx->variable()->getStart()->getLine() << "Variable has no value: " << temp_var.name << endl;
						return;
					}

					if (!temp_var.is_func && !temp_var.is_proc)
					{
						if (temp_var.type != temp.type)
						{
							cout << "Line:" << ctx->variable()->getStart()->getLine() << "    Cannot assign values to variables of different types" << endl;
							return;
						}
						if (NULL == temp.all)
						{
							if ("integer" == temp.type)
							{
								temp.all = semantics::builder->CreateAlloca(llvm::Type::getInt32Ty(*semantics::context), nullptr);
							}
							else if ("boolean" == temp.type)
							{
								temp.all = semantics::builder->CreateAlloca(llvm::Type::getInt32Ty(*semantics::context), nullptr);
							}
							else if ("char" == temp.type)
							{
								temp.all = semantics::builder->CreateAlloca(llvm::Type::getInt32Ty(*semantics::context), nullptr);
							}
							else if ("real" == temp.type)
							{
								temp.all = semantics::builder->CreateAlloca(llvm::Type::getFloatTy(*semantics::context), nullptr);
							}
						}

						if ("integer" == temp.type)
						{
							auto var_value = semantics::builder->CreateLoad(llvm::Type::getInt32Ty(*semantics::context), temp_var.all);
							temp.value = temp_var.value;
							semantics::builder->CreateStore(var_value, temp.all);
						}
						else if ("boolean" == temp.type)
						{
							auto var_value = semantics::builder->CreateLoad(llvm::Type::getInt32Ty(*semantics::context), temp_var.all);
							temp.value = temp_var.value;
							semantics::builder->CreateStore(var_value, temp.all);
						}
						else if ("char" == temp.type)
						{
							auto var_value = semantics::builder->CreateLoad(llvm::Type::getInt8Ty(*semantics::context), temp_var.all);
							temp.value = temp_var.value;
							semantics::builder->CreateStore(var_value, temp.all);
						}
						else if ("real" == temp.type)
						{
							auto var_value = semantics::builder->CreateLoad(llvm::Type::getFloatTy(*semantics::context), temp_var.all);
							temp.value = temp_var.value;
							semantics::builder->CreateStore(var_value, temp.all);
						}
					}

					else if (temp_var.is_proc)
					{
						cout << "Line:" << ctx->variable()->getStart()->getLine() << "    procedure has no return value" << endl;
						return;
					}

					else if (temp_var.is_func)
					{
					}
				}



bool semanticsListener::Assign(table &temp)
{
	if (temp.type != semantics::exp_type.back())
	{
		cout << "Line:" << ctx->variable()->getStart()->getLine() << "    Cannot assign values to variables of different types" << endl;
		semantics::exp_type.pop_back();
		semantics::exp_type.pop_back();
		return false;
	}
	else
	{
		if ("integer" == semantics::exp_type.back())
		{
			if (NULL == temp.all)
			{
				temp.all = semantics::builder->CreateAlloca(llvm::Type::getInt32Ty(*semantics::context), nullptr);
			}
			int integer = atoi(semantics::exp_value.back().c_str());
			auto value = llvm::ConstantInt::get(llvm::Type::getInt32Ty(*semantics::context), integer);
			semantics::builder->CreateStore(value, temp.all);
			temp.value = semantics::exp_value.back();
		}
		else if ("char" == semantics::exp_type.back())
		{
			if (NULL == temp.all)
			{
				temp.all = semantics::builder->CreateAlloca(llvm::Type::getInt8Ty(*semantics::context), nullptr);
			}
			char ch = atoi(semantics::exp_value.back().c_str());
			// cout << "ch:" << ch << endl;
			auto value = llvm::ConstantInt::get(llvm::Type::getInt8Ty(*semantics::context), ch);
			semantics::builder->CreateStore(value, temp.all);
			temp.value = semantics::exp_value.back();
		}
		else if ("real" == semantics::exp_type.back())
		{
			if (NULL == temp.all)
			{
				temp.all = semantics::builder->CreateAlloca(llvm::Type::getFloatTy(*semantics::context), nullptr);
			}
			double real = atof(semantics::exp_value.back().c_str());
			auto value = llvm::ConstantInt::get(llvm::Type::getFloatTy(*semantics::context), real);
			semantics::builder->CreateStore(value, temp.all);
			temp.value = semantics::exp_value.back();
		}
		else if ("boolean" == semantics::exp_type.back())
		{
			int boolean = atoi(semantics::exp_value.back().c_str());
			if (0 != boolean && 1 != boolean)
			{
				cout << "Line:" << ctx->variable()->getStart()->getLine() << "    Cannot assign values to variables of different types" << endl;
				return false;
			}
			if (NULL == temp.all)
			{
				temp.all = semantics::builder->CreateAlloca(llvm::Type::getInt32Ty(*semantics::context), nullptr);
			}
			auto value = llvm::ConstantInt::get(llvm::Type::getInt32Ty(*semantics::context), boolean);
			semantics::builder->CreateStore(value, temp.all);
			temp.value = semantics::exp_value.back();
		}
		semantics::exp_type.pop_back();
		semantics::exp_value.pop_back();
		semantics::index.pop_back();
		return true;
	}
}


/*
	const int argc1 = temp.arguments_num;
	const int argc2 = argc1;
	vector<llvm::Type *> function_args;
	struct Argument argument;
	for (int i = 0; i < argc2; i++)
	{
		argument = temp.arguments[i];
		if ("integer" == argument.type)
		{
			function_args.push_back(llvm::Type::getInt32Ty(*semantics::context));
		}
		else if ("real" == argument.type)
		{
			function_args.push_back(llvm::Type::getFloatTy(*semantics::context));
		}
		else if ("char" == argument.type)
		{
			function_args.push_back(llvm::Type::getInt8Ty(*semantics::context));
		}
		else if ("boolean" == argument.type)
		{
			function_args.push_back(llvm::Type::getInt32Ty(*semantics::context));
		}
	}
	string return_type = temp.type;
	if ("integer" == return_type)
	{
		temp.functiontype = llvm::FunctionType::get(llvm::Type::getInt32Ty(*semantics::context), function_args, false);
		temp.function = llvm::Function::Create(temp.functiontype, llvm::GlobalValue::ExternalLinkage, temp.name, mod.get());
		temp.block = llvm::BasicBlock::Create(*semantics::context, "", temp.function); // sum函数的基本块
		std::unique_ptr<llvm::IRBuilder<>> builder = std::make_unique<llvm::IRBuilder<>>(temp.block);
	}
	else if("char"==return_type)
	{
		temp.functiontype = llvm::FunctionType::get(llvm::Type::getInt8Ty(*semantics::context), function_args, false);
		temp.function = llvm::Function::Create(temp.functiontype, llvm::GlobalValue::ExternalLinkage, temp.name, mod.get());
		temp.block = llvm::BasicBlock::Create(*semantics::context, "", temp.function); // sum函数的基本块
		std::unique_ptr<llvm::IRBuilder<>> builder = std::make_unique<llvm::IRBuilder<>>(temp.block);
	} */